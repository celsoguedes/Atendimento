/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JInternalFrame.java to edit this template
 */
package telas;

import Modelos.Conexao;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author sucel
 */
public class ConsultarAgendamento extends javax.swing.JInternalFrame {

    private String ID_Agendamento;

    public ConsultarAgendamento() {
        initComponents();
        listarConsultas();
        this.ID_Agendamento = ID_Agendamento;

    }

    public void listarConsultas() {

        try {
            //Conectar ao banco de dados:
            Conexao com = new Conexao();

            //Criar uma consulta para executar no banco
            Statement stmt = null;

            //aciona o mecanismo necessário para a criação da consulta
            stmt = com.c.createStatement();
            //instancia variavel para receber resultado da pesquisa
            ResultSet rs = null;

            //Atribui o valor da pesquisa à variável
            rs = stmt.executeQuery("SELECT Paciente.Nome_Paciente, Quiroprata.nome, AgendamentoConsulta.ID_Agendamento,AgendamentoConsulta.Agendamento, AgendamentoConsulta.Valor, AgendamentoConsulta.Horario,AgendamentoConsulta.consulta FROM AgendamentoConsulta INNER JOIN Paciente ON Paciente.Id_Paciente = Paciente_ID INNER JOIN Quiroprata ON Quiroprata.Id_Quiroprata = Quiroprata_ID Order By Agendamento, Horario");
            // Instancia a tabela nodelo
            DefaultTableModel tabelaModel = (DefaultTableModel) tabelaConsulta.getModel();
            //Seta a linha 0 (inicial)
            tabelaModel.setRowCount(0);
            tabelaConsulta.removeColumn(tabelaConsulta.getColumnModel().getColumn(2));

            //cria laço para preenher a tabela com os dados da pesquisa
            while (rs.next()) {
                String valor = rs.getString("Valor");
                float vl = Float.parseFloat(valor.replace(",", "."));
                valor = String.format("%.02f", vl);
                tabelaModel.addRow(new Object[]{rs.getString("Nome_Paciente"), rs.getString("Nome"), rs.getString("ID_Agendamento"), rs.getString("Agendamento"), valor, rs.getString("Horario"), rs.getString("Consulta")});

            }

            //Fecha o conjunto de resultados para limpar a memória     
            //Fecha o mecanismo de consulta
            stmt.close();

            //Fecha a conexão com o banco de dados
            com.c.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaConsulta = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        filtrarConsultas = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        botaoEditaragendamento = new javax.swing.JButton();

        setClosable(true);
        setIconifiable(true);
        setMaximizable(true);
        setResizable(true);
        setTitle("Consultar Agendamento");

        jPanel1.setBackground(new java.awt.Color(102, 204, 255));

        tabelaConsulta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Paciente", "Quiroprata", "ID", "Data", "Valor", "Horário", "Consulta"
            }
        ));
        jScrollPane1.setViewportView(tabelaConsulta);

        jLabel1.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel1.setText("Filtro:  ");

        filtrarConsultas.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                filtrarConsultasKeyReleased(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        jLabel2.setText("Editar  ");

        botaoEditaragendamento.setBackground(new java.awt.Color(51, 153, 0));
        botaoEditaragendamento.setFont(new java.awt.Font("Tahoma", 3, 12)); // NOI18N
        botaoEditaragendamento.setText("Editar");
        botaoEditaragendamento.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                botaoEditaragendamentoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 1065, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addContainerGap(166, Short.MAX_VALUE))
                    .addComponent(filtrarConsultas)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2)
                            .addComponent(botaoEditaragendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 98, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(filtrarConsultas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(170, 170, 170)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(botaoEditaragendamento, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void filtrarConsultasKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_filtrarConsultasKeyReleased
        try {

            Conexao com = new Conexao();
            Statement stmt = null;
            stmt = com.c.createStatement();
            ResultSet rs = null;
            rs = stmt.executeQuery("SELECT Paciente.Nome_Paciente, Quiroprata.nome ,AgendamentoConsulta.ID_Agendamento, AgendamentoConsulta.Agendamento, AgendamentoConsulta.Valor, AgendamentoConsulta.Horario,AgendamentoConsulta.consulta FROM AgendamentoConsulta INNER JOIN Paciente ON Paciente.Id_Paciente = Paciente_ID INNER JOIN Quiroprata ON Quiroprata.Id_Quiroprata = Quiroprata_ID WHERE Paciente.Nome_Paciente LIKE '%" + filtrarConsultas.getText() + "%' or Paciente.CPF LIKE '%" + filtrarConsultas.getText() + "%'");

            DefaultTableModel tabelaModel = (DefaultTableModel) tabelaConsulta.getModel();
            tabelaModel.setRowCount(0);

            while (rs.next()) {

                tabelaModel.addRow(new Object[]{rs.getString("Nome_Paciente"), rs.getString("Nome"), rs.getString("ID_Agendamento"), rs.getString("Agendamento"), rs.getString("Valor"), rs.getString("Horario"), rs.getString("Consulta")});

            }
            stmt.close();

            //Fecha a conexão com o banco de dados
            com.c.close();
        } catch (Exception e) {
            System.err.println(e.getClass().getName() + ": " + e.getMessage());
            System.exit(0);
        }
    }//GEN-LAST:event_filtrarConsultasKeyReleased

    private void botaoEditaragendamentoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_botaoEditaragendamentoActionPerformed
        //Validar seleção de linha
        if (tabelaConsulta.getSelectedRowCount() == 0) {
            JOptionPane.showMessageDialog(null, "favor selecionar uma linha");
            return;
        };

        try {
            //instancia variavel 
            String ID_Agendamento;
            //atribui à variavel o valor do CPF da linha selecionada
            ID_Agendamento = tabelaConsulta.getModel().getValueAt(tabelaConsulta.getSelectedRow(), 2).toString();
            //Remove todas as telas
            this.removeAll();
            //instancia e exibe a tela de editar paciente
            EditarAgendamento tela = new EditarAgendamento(ID_Agendamento);
            getParent().add(tela);
            this.setVisible(false);
            tela.setMaximum(true);
            tela.setVisible(true);
            this.repaint();

        } catch (Exception e) {
        }

    }//GEN-LAST:event_botaoEditaragendamentoActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton botaoEditaragendamento;
    private javax.swing.JTextField filtrarConsultas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tabelaConsulta;
    // End of variables declaration//GEN-END:variables
}
